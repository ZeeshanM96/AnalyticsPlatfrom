name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-backend:
    name: Code Quality Check - Backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8

    - name: Run Black
      run: black --check backend/ kafka/ injestion/ pulsar_lib/ scripttotest/


    - name: Run flake8
      run: flake8 backend/ kafka/ injestion/ pulsar_lib/ scripttotest/

  lint-frontend:
    name: Code Quality Check - Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run Prettier (check only)
      run: |
        npm run format:check

    - name: Run ESLint
      run: |
        npm run lint

    - name: Run Stylelint
      run: |
        npm run stylelint

  test:
    name: Run Tests (pytest)
    runs-on: ubuntu-latest
    needs: 
      - lint-backend
      - lint-frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Microsoft ODBC Driver for SQL Server (Ubuntu 24.04 workaround)
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
        sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/ubuntu/22.04/prod jammy main"
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run pytest
      env:
        PYTHONPATH: .
        KAFKA_BROKER: ${{ secrets.KAFKA_BROKER }}
        DB_TOPIC: ${{ secrets.DB_TOPIC }}
        WS_TOPIC: ${{ secrets.WS_TOPIC }}
        EXTERNAL_TOPIC: ${{ secrets.EXTERNAL_TOPIC }}
        CONSUMER_GROUP_DB: ${{ secrets.CONSUMER_GROUP_DB }}
        CONSUMER_GROUP_WS: ${{ secrets.CONSUMER_GROUP_WS }}
        CONSUMER_GROUP_EXTERNAL: ${{ secrets.CONSUMER_GROUP_EXTERNAL }}
        PRODUCE_INTERVAL_SEC: ${{ secrets.PRODUCE_INTERVAL_SEC }}
        MESSAGES_PER_SECOND: ${{ secrets.MESSAGES_PER_SECOND }}

        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        API_KEY: ${{ secrets.API_KEY }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        RAW_TOPIC: ${{ secrets.RAW_TOPIC }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GITHUB_CLIENT_ID: ${{ secrets.CLIENT_ID_GITHUB }}
        GITHUB_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET_GITHUB }}
        OUTLOOK_CLIENT_ID: ${{ secrets.OUTLOOK_CLIENT_ID }}
        OUTLOOK_CLIENT_SECRET: ${{ secrets.OUTLOOK_CLIENT_SECRET }}
        OUTLOOK_TENANT_ID: ${{ secrets.OUTLOOK_TENANT_ID }}
      run: |
        pytest

  deploy:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: false
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/analytical-dashboard:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/analytical-dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker

    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/analytical-dashboard:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/analytical-dashboard:${{ github.sha }}